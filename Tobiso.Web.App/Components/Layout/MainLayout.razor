@inherits LayoutComponentBase
@using System.Text.Json
@using Tobiso.Web.App.Models
@using Tobiso.Web.App.Services
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject IPreferenceService PreferenceService
@inject NavigationManager NavigationManager

<HeadContent>
    <meta name="description" content="Tobiso je vzdělávací platforma zaměřená na školní výuku pro žáky základních škol. Nabízí materiály, které pokrývají různé předměty, jako je mluvnice, literatura, sloh, matematika, chemie a hudební výchova.">
    <meta property="og:title" content="Tobiso">
    <meta property="og:description" content="Tobiso je vzdělávací platforma zaměřená na školní výuku pro žáky základních škol. Nabízí materiály, jako je mluvnice, literatura, sloh, matematika a dalších 6.">
    <meta property="og:type" content="website">
    <meta property="og:image" content="https://tobiso.com/images/ucivo.png">
    <meta property="og:url" content="https://tobiso.com">
    <meta name="twitter:title" content="Tobiso">
    <meta name="twitter:description" content="Tobiso je vzdělávací platforma zaměřená na školní výuku pro žáky základních škol. Nabízí předměty, jako je mluvnice, literatura, sloh, matematika a dalších 6.">
    <meta name="twitter:card" content="summary_large_image">
    <link rel="sitemap" type="application/xml" href="/sitemap.xml" />
</HeadContent>

<script>
    function loadGoogleAnalytics() {
        console.log("Loading Google Analytics...");
        gtag("js", new Date());
        gtag("config", "G-1CDLST0SSK");
        console.log("Google Analytics loaded.");
    }
</script>
<div class="page" xmlns="http://www.w3.org/1999/html">
    <div class="sidebar">
        <NavMenu />
    </div>
    <div class="loading-bar-container">
        <div class="loading-bar"></div>
    </div>
    <main>
        <section>
            <article class="content px-4">
                @Body
            </article>
        </section>
    </main>
</div>
<footer>
    <p>© 2025, Všechna práva vyhrazena</p>
    <div class="footer-content">
        <button @onclick="NavigateToPrivacy">Zásady ochrany osobních údajů</button>
        <button @onclick="NavigateToAbout">O mně</button>
    </div>
</footer>
@* Search Modal *@
<div id="searchModal" class="modal">
    <div class="modal-content">
        <span id="closeSearch">&times;</span>
        <input type="text" id="search" placeholder="Hledat..." />
        <div id="results"></div>
    </div>
</div>
@* Cookie Consent Banner *@
<div id="cookie-consent" style="display: none;">
    <p>Tento web používá cookies. Pokud nesouhlasíte, budou se posílat jen nezbytné cookies.</p>
    <button @onclick="AcceptCookies">Souhlasím</button>
    <button class="decline" @onclick="DeclineCookies">Nesouhlasím</button>
</div>

@code {
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<MainLayout>? dotNetHelper;

    private bool isDarkMode = false;
    private string? cookieConsent = null;

    protected override async Task OnInitializedAsync()
    {
        var darkModePref = await PreferenceService.GetPreferenceAsync("darkMode");
        isDarkMode = bool.TryParse(darkModePref, out var darkMode) && darkMode;
        cookieConsent = await PreferenceService.GetPreferenceAsync("cookieConsent");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Dynamicky vloží Google Analytics skript a inicializuje gtag
            await JSRuntime.InvokeVoidAsync("eval", @"
                var script = document.createElement('script');
                script.src = 'https://www.googletagmanager.com/gtag/js?id=G-1CDLST0SSK';
                script.async = true;
                document.head.appendChild(script);

                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());
                gtag('config', 'G-1CDLST0SSK');
            ");

            // Načtení JavaScript modulu
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/blazor-utils.js");

            dotNetHelper = DotNetObjectReference.Create(this);

            // Předání preferencí do JavaScriptu
            await SetInitialPreferences();

            // Inicializace aplikace
            await jsModule.InvokeVoidAsync("initializeApp", dotNetHelper);
        }
    }

    private async Task SetInitialPreferences()
    {
        // Nastavení dark mode preference v DOM
        if (isDarkMode)
        {
            await JSRuntime.InvokeVoidAsync("eval",
                "document.body.classList.add('dark-mode-preferred')");
        }

        // Nastavení cookie consent v DOM
        if (!string.IsNullOrEmpty(cookieConsent))
        {
            await JSRuntime.InvokeVoidAsync("eval",
                $"document.documentElement.dataset.cookieConsent = '{cookieConsent}'");
        }
    }

    // Metody volané z JavaScriptu
    [JSInvokable]
    public async Task OnDarkModeToggled(bool isDark)
    {
        isDarkMode = isDark;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnSearchPerformed(string query, string results)
    {
        try
        {
            var searchResults = JsonSerializer.Deserialize<SearchResult[]>(results);
            Console.WriteLine($"Search performed: {query}, Results count: {searchResults?.Length ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing search results: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnCookieConsentChanged(string consent)
    {
        cookieConsent = consent;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SetPreference(string key, string value)
    {
        try
        {
            if (string.IsNullOrEmpty(value))
            {
                await PreferenceService.RemovePreferenceAsync(key);
            }
            else
            {
                await PreferenceService.SetPreferenceAsync(key, value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting preference {key}: {ex.Message}");
        }
    }

    public async Task ScrollToTop()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("scrollToTop");
    }

    public async Task GoBack()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("goBack");
    }

    public async Task AcceptCookies()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("acceptCookies");
    }

    public async Task DeclineCookies()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("declineCookies");
    }

    public async Task RemoveCookieConsent()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("removeCookieConsent");
    }

    private void NavigateToPrivacy() => NavigationManager.NavigateTo("post/70");
    private void NavigateToAbout() => NavigationManager.NavigateTo("post/16");

    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            await jsModule.DisposeAsync();
        }
        dotNetHelper?.Dispose();
    }
}