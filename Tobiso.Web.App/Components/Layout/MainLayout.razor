@inherits LayoutComponentBase
@using System.Text.Json
@using Tobiso.Web.App.Models
@using Tobiso.Web.App.Services
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject IPreferenceService PreferenceService

<div class="page" xmlns="http://www.w3.org/1999/html">
    <div class="sidebar">
        <NavMenu />
    </div>
    <div class="loading-bar-container">
        <div class="loading-bar"></div>
    </div>
    <main>
        <section>
            <article class="content px-4">
                @Body
            </article>
        </section>
    </main>
</div>

@* Search Modal *@
<div id="searchModal" class="modal">
    
    <div class="modal-content">
        <span id="closeSearch">&times;</span>
        <input type="text" id="search" placeholder="Hledat...">
        <div id="results"></div>
    </div>
</div>

@* Cookie Consent Banner *@
<div id="cookie-consent" style="display: none;">
    
    <p>Tento web používá cookies. Pokud nesouhlasíte, budou se posílat jen nezbytné cookies.</p>
    <button onclick="acceptCookies()">Souhlasím</button>
    <button class="decline" onclick="declineCookies()">Nesouhlasím</button>
</div>

@code {
    private IJSObjectReference? jsModule;
    private DotNetObjectReference<MainLayout>? dotNetHelper;
    
    private bool isDarkMode = false;
    private string? cookieConsent = null;

    protected override async Task OnInitializedAsync()
    {
        // Načtení uložených preferencí
        var darkModePref = await PreferenceService.GetPreferenceAsync("darkMode");
        isDarkMode = bool.TryParse(darkModePref, out var darkMode) && darkMode;
        
        cookieConsent = await PreferenceService.GetPreferenceAsync("cookieConsent");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Načtení JavaScript modulu
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./js/blazor-utils.js");
            
            dotNetHelper = DotNetObjectReference.Create(this);
            
            // Předání preferencí do JavaScriptu
            await SetInitialPreferences();
            
            // Inicializace aplikace
            await jsModule.InvokeVoidAsync("initializeApp", dotNetHelper);
        }
    }

    private async Task SetInitialPreferences()
    {
        // Nastavení dark mode preference v DOM
        if (isDarkMode)
        {
            await JSRuntime.InvokeVoidAsync("eval", 
                "document.body.classList.add('dark-mode-preferred')");
        }
        
        // Nastavení cookie consent v DOM
        if (!string.IsNullOrEmpty(cookieConsent))
        {
            await JSRuntime.InvokeVoidAsync("eval", 
                $"document.documentElement.dataset.cookieConsent = '{cookieConsent}'");
        }
    }

    // Metody volané z JavaScriptu
    [JSInvokable]
    public async Task OnDarkModeToggled(bool isDark)
    {
        isDarkMode = isDark;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnSearchPerformed(string query, string results)
    {
        try
        {
            var searchResults = JsonSerializer.Deserialize<SearchResult[]>(results);
            // Zde můžete logovat vyhledávání nebo aktualizovat analytiky
            Console.WriteLine($"Search performed: {query}, Results count: {searchResults?.Length ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing search results: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task OnCookieConsentChanged(string consent)
    {
        cookieConsent = consent;
        StateHasChanged();
    }

    [JSInvokable]
    public async Task SetPreference(string key, string value)
    {
        try
        {
            if (string.IsNullOrEmpty(value))
            {
                await PreferenceService.RemovePreferenceAsync(key);
            }
            else
            {
                await PreferenceService.SetPreferenceAsync(key, value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting preference {key}: {ex.Message}");
        }
    }

    // Veřejné metody pro volání z Blazor komponent
    public async Task ScrollToTop()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("scrollToTop");
    }

    public async Task GoBack()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("goBack");
    }

    public async Task AcceptCookies()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("acceptCookies");
    }

    public async Task DeclineCookies()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("declineCookies");
    }

    public async Task RemoveCookieConsent()
    {
        if (jsModule != null)
            await jsModule.InvokeVoidAsync("removeCookieConsent");
    }

    // Cleanup
    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            await jsModule.DisposeAsync();
        }
        dotNetHelper?.Dispose();
    }
}