@page "/post/{Id:int}"
@using System.Text.RegularExpressions
@using Tobiso.Web.Shared.DTOs
@using Tobiso.Web.Shared.Interfaces
@inject ITobisoAnonymApi Api
@inject IJSRuntime Js
@inject NavigationManager Navigation
<PageTitle>@(_post?.Title ?? "Blogový post")</PageTitle>
<style>
    section img {
        max-width: 16rem;
    }
</style>
@if (_post == null)
{
    <p>Načítám...</p>
}
else
{
    <button class="btn btn-secondary mb-3" @onclick="BackHistory">Zpět</button>
    <h1 class="verybig">@_post.Title</h1>
    <div class="mb-4">
        @((MarkupString)Markdig.Markdown.ToHtml(_transformedContent ?? _post.Content))
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private PostResponse? _post;
    private List<PostResponse>? _allPosts;
    private string? _transformedContent;
    private string? _returnUrl;

    protected override async Task OnInitializedAsync()
    {
        _post = await Api.GetPostById(Id);
        _allPosts = (await Api.GetAllPosts()).ToList();
        _transformedContent = TransformLinks(_post?.Content ?? "");
    }

    protected override async Task OnParametersSetAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        _returnUrl = query.TryGetValue("returnUrl", out var val) ? val.ToString() : null;
        _post = await Api.GetPostById(Id);
        _allPosts = (await Api.GetAllPosts()).ToList();
        _transformedContent = TransformLinks(_post?.Content ?? "");
    }

    private string TransformLinks(string content)
    {
        if (string.IsNullOrEmpty(content)) return content;
        var html = Markdig.Markdown.ToHtml(content);
        // Oprav obrázky: přidej prefix k src u <img>
        var imgRegex = new System.Text.RegularExpressions.Regex("<img\\s+[^>]*src=\\\"([^\\\"]+)\\\"", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        html = imgRegex.Replace(html, new MatchEvaluator(match => {
            var origSrc = match.Groups[1].Value;
            // Pokud už je tam http, ponech
            if (origSrc.Contains("http")) return match.Value;
            // Pokud je tam images, přidej prefix
            if (origSrc.Contains("images"))
            {
                var fullSrc = origSrc.StartsWith("/") ? $"https://tobiso.com{origSrc}" : $"https://tobiso.com/{origSrc}";
                return match.Value.Replace(origSrc, fullSrc);
            }
            return match.Value;
        }));
        // Zpracování odkazů
        var regex = new System.Text.RegularExpressions.Regex("<a\\s+href=\\\"([^\\\"]+)\\\"(.*?)>(.*?)<\\/a>", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        return regex.Replace(html, new MatchEvaluator(match => {
            var origHref = match.Groups[1].Value;
            var attrs = match.Groups[2].Value;
            var linkText = match.Groups[3].Value;
            // Pokud je v odkazu http, otevři v nové kartě a nic nehledej
            if (origHref.Contains("http"))
            {
                return string.Format("<a href=\"{0}\" target=\"_blank\" rel=\"noopener noreferrer\"{1}>{2}</a>", origHref, attrs, linkText);
            }
            // Pokud je v odkazu files, přidej prefix a otevři v nové kartě
            if (origHref.Contains("files"))
            {
                var fullUrl = origHref.StartsWith("/") ? $"https://tobiso.com{origHref}" : $"https://tobiso.com/{origHref}";
                return string.Format("<a href=\"{0}\" target=\"_blank\" rel=\"noopener noreferrer\"{1}>{2}</a>", fullUrl, attrs, linkText);
            }
            // Odstranění prefixu
            var file = System.Text.RegularExpressions.Regex.Replace(origHref, "^(ml-|l-|sl-|hv-|m-|ch-|f-|pr-|z-|li-|geo-)", "");
            // Nahrazení .html za .md
            file = file.Replace(".html", ".md");
            // Přidání / na začátek až po všech úpravách
            if (!file.StartsWith("/")) file = "/" + file;
            // Debug info: zobraz přeformátovaný filename (po všech úpravách)
            var debugInfo = string.Format("<span style=\"color:blue; font-size:small;\">{0}</span> ", file);
            // Najdi post podle FilePath
            var postMatch = _allPosts?.FirstOrDefault(p => p.FilePath.EndsWith(file, StringComparison.OrdinalIgnoreCase));
            if (postMatch != null)
            {
                return string.Format("{0}<a href=\"/post/{1}\"{2}>{3}</a>", debugInfo, postMatch.Id, attrs, linkText);
            }
            return string.Format("{0}<span style=\"color:gray; text-decoration:line-through;\">{1}</span>", debugInfo, linkText);
        }));
    }

    private void BackHistory()
    {
        if (!string.IsNullOrEmpty(_returnUrl))
        {
            Js.InvokeVoidAsync("eval", $"window.location.href='{_returnUrl}'");
        }
        else
        {
            Navigation.NavigateTo("/categories", forceLoad: true);
        }
    }
}
