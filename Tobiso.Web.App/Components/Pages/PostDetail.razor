@page "/post/{Id:int}"
@using System.Text.RegularExpressions
@using Tobiso.Web.Shared.DTOs
@using Tobiso.Web.Shared.Interfaces
@inject ITobisoAnonymApi Api
@inject IJSRuntime Js
@inject NavigationManager Navigation
<PageTitle>@(_post?.Title ?? "Blogový post")</PageTitle>
<style>
    section img {
        max-width: 16rem;
    }
    .content {
        text-align: left;
    }
</style>
@if (_post == null)
{
    <p>Načítám...</p>
}
else
{
    <h1 class="verybig">@_post.Title</h1>
    <div class="mb-4">
        @if (_fileSuffix == ".md")
        {
            @((MarkupString)TransformMarkdownContent(_post.Content))
        }
        else if (_fileSuffix == ".html")
        {
            @((MarkupString)(_post.Content))
        }
        else
        {
            @((MarkupString)(_post.Content))
        }
    </div>
    <button class="btn btn-secondary mb-3" @onclick="BackHistory">Zpět</button>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private PostResponse? _post;
    private List<PostResponse>? _allPosts;
    private string? _returnUrl;
    private string? _fileSuffix;

    protected override async Task OnInitializedAsync()
    {
        _post = await Api.GetPostById(Id);
        _allPosts = (await Api.GetAllPosts()).ToList();
        SetFileSuffix();
    }

    protected override async Task OnParametersSetAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        _returnUrl = query.TryGetValue("returnUrl", out var val) ? val.ToString() : null;
        _post = await Api.GetPostById(Id);
        _allPosts = (await Api.GetAllPosts()).ToList();
        SetFileSuffix();
    }

    private void SetFileSuffix()
    {
        if (_post != null && !string.IsNullOrEmpty(_post.FilePath))
        {
            if (_post.FilePath.EndsWith(".md", StringComparison.OrdinalIgnoreCase))
                _fileSuffix = ".md";
            else if (_post.FilePath.EndsWith(".html", StringComparison.OrdinalIgnoreCase))
                _fileSuffix = ".html";
            else
                _fileSuffix = null;
        }
        else
        {
            _fileSuffix = null;
        }
    }

    private string TransformMarkdownContent(string? content)
    {
        if (string.IsNullOrEmpty(content)) return string.Empty;
        var html = Markdig.Markdown.ToHtml(content);
        // Oprav obrázky: přidej prefix k src u <img>
        var imgRegex = new Regex("<img\\s+[^>]*src=\\\"([^\\\"]+)\\\"", RegexOptions.IgnoreCase);
        html = imgRegex.Replace(html, match => {
            var origSrc = match.Groups[1].Value;
            if (origSrc.Contains("http")) return match.Value;
            if (origSrc.Contains("images"))
            {
                var fullSrc = origSrc.StartsWith("/") ? $"https://tobiso.com{origSrc}" : $"https://tobiso.com/{origSrc}";
                return match.Value.Replace(origSrc, fullSrc);
            }
            return match.Value;
        });
        // Zpracování odkazů
        var regex = new Regex("<a\\s+href=\\\"([^\\\"]+)\\\"(.*?)>(.*?)<\\/a>", RegexOptions.IgnoreCase);
        html = regex.Replace(html, match => {
            var origHref = match.Groups[1].Value;
            var attrs = match.Groups[2].Value;
            var linkText = match.Groups[3].Value;
            if (origHref.Contains("http"))
            {
                return $"<a href=\"{origHref}\" target=\"_blank\" rel=\"noopener noreferrer\"{attrs}>{linkText}</a>";
            }
            if (origHref.Contains("files"))
            {
                var fullUrl = origHref.StartsWith("/") ? $"https://tobiso.com{origHref}" : $"https://tobiso.com/{origHref}";
                return $"<a href=\"{fullUrl}\" target=\"_blank\" rel=\"noopener noreferrer\"{attrs}>{linkText}</a>";
            }
            if (origHref.StartsWith("mailto:", StringComparison.OrdinalIgnoreCase))
            {
                return $"<a href=\"{origHref}\" onclick=\"window.location.href='{origHref}'; return false;\"{attrs}>{linkText}</a>";
            }
            var file = Regex.Replace(origHref, "^(ml-|l-|sl-|hv-|m-|ch-|f-|pr-|z-|li-|geo-)", "");
            file = file.Replace(".html", ".md");
            if (!file.StartsWith("/")) file = "/" + file;
            var postMatch = _allPosts?.FirstOrDefault(p => p.FilePath.EndsWith(file, StringComparison.OrdinalIgnoreCase));
            if (postMatch != null)
            {
                return $"<a href=\"/post/{postMatch.Id}\"{attrs}>{linkText}</a>";
            }
            return $"<span style=\"color:gray; text-decoration:line-through;\">{linkText}</span>";
        });
        // Zabal text v tečkách do divu s class intro
        var dotsRegex = new Regex(@"(\.\.\.\s*)(.*?)(\s*\.\.\.)", RegexOptions.Singleline);
        html = dotsRegex.Replace(html, m => $"<div class=\"intro\">{m.Groups[2].Value}</div>");
        var singleDotsRegex = new Regex(@"<p>\s*\.\.\.\s*<\/p>", RegexOptions.Singleline);
        html = singleDotsRegex.Replace(html, "");
        html = html.Replace("...", "");
        html = ConvertMarkdownTablesToHtml(html);
        return html;
    }

    private string ConvertMarkdownTablesToHtml(string html)
    {
        var tableRegex = new Regex(@"<p>(\|.+?\|\s*\n\|[-:| ]+\|\s*\n(?:\|.+?\|\s*\n?)+)</p>", RegexOptions.Singleline);
        html = tableRegex.Replace(html, match =>
        {
            var tableBlock = match.Groups[1].Value;
            var lines = tableBlock.Split('\n');
            if (lines.Length < 2) return match.Value;
            var headerCells = lines[0].Split('|').Select(c => c.Trim()).Where(c => !string.IsNullOrEmpty(c)).ToList();
            var bodyLines = lines.Skip(2).ToList();
            var sb = new System.Text.StringBuilder();
            sb.Append("<table class=\"md-table\"><thead><tr>");
            foreach (var cell in headerCells)
                sb.Append($"<th>{System.Net.WebUtility.HtmlEncode(cell)}</th>");
            sb.Append("</tr></thead><tbody>");
            foreach (var line in bodyLines)
            {
                var cells = line.Split('|').Select(c => c.Trim()).Where(c => !string.IsNullOrEmpty(c)).ToList();
                if (cells.Count == headerCells.Count)
                {
                    sb.Append("<tr>");
                    foreach (var cell in cells)
                        sb.Append($"<td>{System.Net.WebUtility.HtmlEncode(cell)}</td>");
                    sb.Append("</tr>");
                }
            }
            sb.Append("</tbody></table>");
            return sb.ToString();
        });
        return html;
    }
    private void BackHistory()
    {
        if (!string.IsNullOrEmpty(_returnUrl))
        {
            Js.InvokeVoidAsync("eval", $"window.location.href='{_returnUrl}'");
        }
        else
        {
            Navigation.NavigateTo("/categories", forceLoad: true);
        }
    }
}
