@page "/"
@using Tobiso.Web.Shared.Interfaces
@using Tobiso.Web.Shared.DTOs
@inject ITobisoAnonymApi Api
@inject NavigationManager Navigation
@inject ILogger<Home> Logger

<PageTitle>Home - Posts</PageTitle>

<h1>Posts</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
    </div>
}

@if (posts == null)
{
    <p>Loading posts...</p>
}
else if (!posts.Any())
{
    <p>No posts found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Title</th>
                    <th scope="col">Category</th>
                    <th scope="col">File Path</th>
                    <th scope="col">Updated</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var post in posts)
                {
                    <tr>
                        <td>@post.Id</td>
                        <td>
                            <strong>
                                <a href="/post/@post.Id" class="text-decoration-none">@post.Title</a>
                            </strong>
                        </td>
                        <td></td>
                        <td>
                            @if (!string.IsNullOrEmpty(post.FilePath))
                            {
                                <code class="text-break">@post.FilePath</code>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (post.UpdatedAt.HasValue)
                            {
                                <small>@post.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</small>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <p class="text-muted">
            <i class="bi bi-info-circle"></i>
            Total posts: <strong>@posts.Count</strong>
        </p>
    </div>
    
    @if (categories.Any())
    {
        <h2>Categories</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in categories)
                {
                    <tr>
                        <td>@category.Id</td>
                        <td>@category.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private IList<PostResponse>? posts;
    private List<CategoryResponse> categories = new List<CategoryResponse>();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
        await LoadCategories();
    }

    private async Task LoadPosts()
    {
        try
        {
            Logger.LogInformation("Starting to load posts from API");

            posts = await Api.GetAllPosts();

            Logger.LogInformation("Successfully loaded {PostCount} posts", posts.Count);

            StateHasChanged();
        }
        catch (Refit.ApiException ex)
        {
            Logger.LogWarning("Api error while loading posts: {Message}", ex.Message);
            errorMessage = $"Error loading posts: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading posts: {ex.Message}";
            Logger.LogError(ex, "Exception occurred while loading posts: {Message}", ex.Message);
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            Logger.LogInformation("Starting to load categories from API");

            var loadedCategories = await Api.GetAllCategories();
            if (loadedCategories != null)
            {
                categories = loadedCategories;
                Logger.LogInformation("Successfully loaded {CategoryCount} categories", categories.Count);
            }
            StateHasChanged();
        }
        catch (Refit.ApiException ex)
        {
            Logger.LogWarning("Api error while loading categories: {Message}", ex.Message);
            // Keep categories as empty list, don't set error message for categories failure
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception occurred while loading categories: {Message}", ex.Message);
            // Keep categories as empty list, don't set error message for categories failure
        }
    }

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    private async Task<bool> JsConfirm(string message)
    {
        return await JS.InvokeAsync<bool>("confirm", message);
    }
}