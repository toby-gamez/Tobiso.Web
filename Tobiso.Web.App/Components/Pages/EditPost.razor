@page "/posts/edit/{Id:int}"
@using Tobiso.Web.Shared.DTOs
@using Tobiso.Web.Shared.Interfaces
@inject ITobisoWebApi Api
@inject NavigationManager Navigation

<h3>Editace postu</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (post == null)
{
    <p>Načítání...</p>
}
else
{
    <EditForm Model="post" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="title" class="form-label">Název</label>
            <InputText id="title" class="form-control" @bind-Value="post.Title" />
        </div>
        <div class="mb-3">
            <label for="filePath" class="form-label">Soubor</label>
            <InputText id="filePath" class="form-control" @bind-Value="post.FilePath" />
        </div>
        <div class="mb-3">
            <label for="category" class="form-label">Kategorie</label>
            <InputSelect id="category" class="form-select" @bind-Value="post.CategoryId">
                <option value="">-- vyber kategorii --</option>
                @foreach (var cat in categories)
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="content" class="form-label">Obsah</label>
            <textarea id="content" class="form-control" rows="8" @bind="post.Content"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Uložit změny</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Zpět</button>
        <button type="button" class="btn btn-danger ms-2" @onclick="OnDeletePost">Smazat</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private PostResponse? post;
    private List<CategoryResponse> categories = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            post = await Api.GetPostById(Id);
            categories = (await Api.GetAllCategories()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await Api.UpdatePost(post!.Id, post!);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task OnDeletePost()
    {
        if (post == null) return;
        if (!await JsConfirm($"Opravdu chcete smazat post s ID {post.Id}?") ) return;
        try
        {
            await Api.DeletePost(post.Id);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Chyba při mazání: {ex.Message}";
        }
    }

    [Inject]
    private IJSRuntime JS { get; set; } = default!;
    private async Task<bool> JsConfirm(string message)
    {
        return await JS.InvokeAsync<bool>("confirm", message);
    }
}
