@page "/"
@using Tobiso.Web.Shared.Interfaces
@using Tobiso.Web.Shared.DTOs
@inject ITobisoWebApi Api
@inject NavigationManager Navigation
@inject ILogger<Home> Logger

<PageTitle>Home - Posts</PageTitle>

<h1>Posts</h1>
<a class="btn btn-primary mb-3" href="login">Přihlásit se</a>
<button class="btn btn-success mb-3" @onclick="GoToAddPost">Přidat post</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
    </div>
}

@if (posts == null)
{
    <p>Loading posts...</p>
}
else if (!posts.Any())
{
    <p>No posts found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Title</th>
                    <th scope="col">Category</th>
                    <th scope="col">File Path</th>
                    <th scope="col">Updated</th>
                    <th scope="col" style="width: 120px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var post in posts)
                {
                    <tr>
                        <td>@post.Id</td>
                        <td>
                            <strong>
                                <a href="/posts/edit/@post.Id" class="text-decoration-none">@post.Title</a>
                            </strong>
                        </td>
                        <td>
                            @if (post.CategoryId.HasValue)
                            {
                                var name = GetCategoryNameById(post.CategoryId);
                                if (!string.IsNullOrEmpty(name))
                                {
                                    <span class="badge bg-primary">@name</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(post.FilePath))
                            {
                                <code class="text-break">@post.FilePath</code>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (post.UpdatedAt.HasValue)
                            {
                                <small>@post.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</small>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm ms-2" @onclick="() => OnDeletePost(post.Id)">Smazat</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <p class="text-muted">
            <i class="bi bi-info-circle"></i>
            Total posts: <strong>@posts.Count</strong>
        </p>
    </div>
}

@code {
    private IList<PostResponse>? posts;
    private IList<CategoryResponse> categories = new List<CategoryResponse>();
    private Dictionary<int, string> categoryNames = new Dictionary<int, string>();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadPosts();
    }

    private async Task LoadCategories()
    {
        try
        {
            var loadedCategories = await Api.GetAllCategories();
            if (loadedCategories != null)
            {
                categories = loadedCategories;
                categoryNames = categories.ToDictionary(c => c.Id, c => c.Name);
                Logger.LogInformation("Successfully loaded {CategoryCount} categories", categories.Count);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading categories: {ex.Message}";
            Logger.LogError(ex, "Error loading categories: {Message}", ex.Message);
            // Ensure collections remain initialized even on error
            categories = new List<CategoryResponse>();
            categoryNames = new Dictionary<int, string>();
        }
    }

    private string? GetCategoryNameById(int? categoryId)
    {
        if (!categoryId.HasValue || categoryNames == null)
        {
            return null;
        }

        return categoryNames.TryGetValue(categoryId.Value, out var name) ? name : null;
    }

    private async Task LoadPosts()
    {
        try
        {
            Console.WriteLine("Starting to load posts...");
            Logger.LogInformation("Starting to load posts from API");

            posts = await Api.GetAllPosts();

            Console.WriteLine($"Successfully loaded {posts.Count} posts");
            Logger.LogInformation("Successfully loaded {PostCount} posts", posts.Count);

            StateHasChanged();
        }
        catch (Refit.ApiException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Console.WriteLine("Unauthorized access - redirecting to login");
            Logger.LogWarning("Unauthorized access to posts - redirecting to login");
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading posts: {ex.Message}";
            Console.WriteLine($"Exception occurred while loading posts: {ex.Message}");
            Console.WriteLine($"Exception details: {ex}");
            Logger.LogError(ex, "Exception occurred while loading posts: {Message}", ex.Message);
        }
    }

    private async Task OnDeletePost(int id)
    {
        if (!await JsConfirm($"Opravdu chcete smazat post s ID {id}?")) return;
        try
        {
            await Api.DeletePost(id);
            await LoadPosts();
        }
        catch (Exception ex)
        {
            errorMessage = $"Chyba při mazání: {ex.Message}";
        }
    }

    private void GoToAddPost()
    {
        Navigation.NavigateTo("/posts/add");
    }

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    private async Task<bool> JsConfirm(string message)
    {
        return await JS.InvokeAsync<bool>("confirm", message);
    }
}