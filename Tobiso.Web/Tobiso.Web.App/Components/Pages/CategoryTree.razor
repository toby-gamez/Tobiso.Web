@page "/categories"
@using Tobiso.Web.Shared.DTOs
@using Tobiso.Web.Shared.Interfaces
@inject ITobisoWebApi Api
@inject NavigationManager Navigation
@inject ILogger<CategoryTree> Logger

<PageTitle>Categories</PageTitle>
<h3>Strom kategorií</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
    </div>
}

@if (categoryTree == null)
{
    <p>Načítání...</p>
}
else
{
    <ul class="category-tree-root">
        @foreach (var category in categoryTree.OrderBy(c => c.Id))
        {
            <li class="category-tree-root-item">
                <div class="category-tree-root-row">
                    <span class="category-tree-toggle" @onclick="() => OnCategoryClick(category.Id)">
                        <i class="bi bi-folder2-open" style="font-size:1.2em; margin-right:0.3em;"></i>
                    </span>
                    <button class="category-tree-btn-root" @onclick="() => OnCategoryClick(category.Id)">@category.Name</button>
                </div>
                @if (category.Children != null && category.Children.Count > 0)
                {
                    <div class="category-tree-children">
                        <CategoryTreeNode Children="category.Children" OnCategoryClick="OnCategoryClick" />
                    </div>
                }
            </li>
        }
    </ul>
}

@if (selectedPosts != null)
{
    <h4>Posty v kategorii</h4>
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Title</th>
                    <th scope="col">Category</th>
                    <th scope="col">File Path</th>
                    <th scope="col">Updated</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var post in selectedPosts)
                {
                    <tr>
                        <td>@post.Id</td>
                        <td><strong>@post.Title</strong></td>
                        <td>
                            @if (post.Category != null)
                            {
                                <span class="badge bg-primary">@post.Category.Name</span>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(post.FilePath))
                            {
                                <code class="text-break">@post.FilePath</code>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            @if (post.UpdatedAt.HasValue)
                            {
                                <small>@post.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</small>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="mt-3">
        <p class="text-muted">
            <i class="bi bi-info-circle"></i>
            Total posts: <strong>@selectedPosts.Count</strong>
        </p>
    </div>
}

<style>
.category-tree-root {
    list-style: none;
    padding-left: 0;
    margin-bottom: 0;
    background: #f8f9fa;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);
    max-width: 480px;
}
.category-tree-root-item {
    margin-bottom: 0.5em;
    border-bottom: 1px solid #e9ecef;
    padding-bottom: 0.5em;
}
.category-tree-root-row {
    display: flex;
    align-items: center;
    gap: 0.5em;
    padding: 0.3em 0.5em;
    border-radius: 6px;
    transition: background 0.2s;
}
.category-tree-root-row:hover {
    background: #e9ecef;
}
.category-tree-btn-root {
    font-size: 1.08em;
    font-weight: 600;
    color: #212529;
    background: none;
    border: none;
    outline: none;
    padding: 0.1em 0.3em;
    cursor: pointer;
    transition: color 0.2s;
    text-align: left;
}
.category-tree-btn-root:hover {
    color: #0d6efd;
    text-decoration: underline;
}
.category-tree-children {
    margin-left: 2em;
    margin-top: 0.2em;
    border-left: 2px solid #e9ecef;
    padding-left: 0.8em;
}
</style>

@code {
    private IList<CategoryTreeResponse>? categoryTree;
    private IList<PostResponse>? selectedPosts;
    private string? errorMessage;
    private HashSet<int> selectedCategoryIds = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categoryTree = await Api.GetCategoryTree();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task OnCategoryClick(int categoryId)
    {
        selectedCategoryIds.Clear();
        CollectCategoryIds(categoryId, categoryTree);
        try
        {
            var allPosts = await Api.GetAllPosts();
            selectedPosts = allPosts.Where(p => p.CategoryId.HasValue && selectedCategoryIds.Contains(p.CategoryId.Value)).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void CollectCategoryIds(int categoryId, IEnumerable<CategoryTreeResponse>? categories)
    {
        if (categories == null) return;
        foreach (var cat in categories)
        {
            if (cat.Id == categoryId)
            {
                AddCategoryAndChildren(cat);
                return;
            }
            if (cat.Children != null && cat.Children.Count > 0)
            {
                CollectCategoryIds(categoryId, cat.Children);
            }
        }
    }

    private void AddCategoryAndChildren(CategoryTreeResponse category)
    {
        selectedCategoryIds.Add(category.Id);
        if (category.Children != null)
        {
            foreach (var child in category.Children)
            {
                AddCategoryAndChildren(child);
            }
        }
    }
}
